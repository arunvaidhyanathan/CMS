@startuml C4_Context_CMS
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

title Case Management System - Context Diagram

Person(complainant, "Complainant", "Employee reporting incidents")
Person(intake_analyst, "Intake Analyst", "Reviews and processes initial case submissions")
Person(investigator, "Investigator", "Conducts detailed investigations")
Person(director, "Ethics Director", "Makes final case decisions")
Person(hr_specialist, "HR Specialist", "Handles HR-related cases")
Person(legal_counsel, "Legal Counsel", "Manages legal/compliance cases")
Person(security_analyst, "Security Analyst", "Investigates security incidents")

System(cms, "Case Management System", "Automates case processing, workflow orchestration, and compliance tracking for ethics violations")

System_Ext(email_system, "Email System", "Sends notifications and updates")
System_Ext(document_store, "Document Repository", "Stores case files and evidence")
System_Ext(audit_system, "Audit & Compliance System", "Regulatory reporting")

Rel(complainant, cms, "Reports incidents via")
Rel(intake_analyst, cms, "Processes cases using")
Rel(investigator, cms, "Conducts investigations via")
Rel(director, cms, "Reviews and closes cases using")
Rel(hr_specialist, cms, "Handles HR cases via")
Rel(legal_counsel, cms, "Manages legal cases using")
Rel(security_analyst, cms, "Investigates security cases via")

Rel(cms, email_system, "Sends notifications via")
Rel(cms, document_store, "Stores/retrieves documents from")
Rel(cms, audit_system, "Reports compliance data to")

@enduml

@startuml C4_Container_CMS_Security
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title CMS Security & Entitlements - Container Diagram

Person(user, "System User", "Various roles: Analyst, Investigator, Director, etc.")

System_Boundary(cms_boundary, "Case Management System") {
    Container(web_app, "Web Application", "React/Angular Frontend", "User interface for case management")
    Container(api_gateway, "API Gateway", "Spring Boot REST API", "Handles authentication, authorization, and API routing")
    Container(auth_service, "Authentication Service", "Spring Security + JWT", "Manages user authentication and session tokens")
    Container(authorization_service, "Authorization Service", "Spring Security RBAC", "Role-based access control and permissions")
    Container(case_service, "Case Management Service", "Spring Boot", "Core business logic for case processing")
    Container(workflow_engine, "Workflow Engine", "Camunda 8.5", "BPMN workflow orchestration")
    Container(audit_service, "Audit Service", "Spring Boot", "Logs all user actions and system events")
    ContainerDb(user_db, "User Database", "PostgreSQL", "Stores user accounts, roles, and permissions")
    ContainerDb(case_db, "Case Database", "PostgreSQL", "Stores case data and audit trails")
}

System_Ext(ldap, "LDAP/Active Directory", "Corporate user directory")

Rel(user, web_app, "Accesses system via", "HTTPS")
Rel(web_app, api_gateway, "Makes API calls to", "REST/HTTPS")
Rel(api_gateway, auth_service, "Validates tokens with", "JWT")
Rel(api_gateway, authorization_service, "Checks permissions via")
Rel(auth_service, user_db, "Validates credentials against")
Rel(authorization_service, user_db, "Retrieves roles from")
Rel(api_gateway, case_service, "Routes authorized requests to")
Rel(case_service, workflow_engine, "Triggers workflows in")
Rel(case_service, case_db, "Reads/writes case data to")
Rel_Back(audit_service, api_gateway, "Logs all API calls from")
Rel(audit_service, case_db, "Stores audit logs in")
Rel(auth_service, ldap, "Synchronizes users with")

note right of authorization_service
  **Role-Based Access Control:**
  • Intake Analyst: CREATE, READ cases
  • HR Specialist: READ/UPDATE HR cases
  • Legal Counsel: READ/UPDATE legal cases
  • Security Analyst: READ/UPDATE security cases
  • Investigator: CREATE investigations
  • Director: ALL permissions
  • Admin: System administration
end note

@enduml

@startuml C4_Component_Workflow
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title CMS Allegation Workflow - Component Diagram

Container_Boundary(workflow_container, "Workflow Engine - Camunda 8.5") {
    Component(process_engine, "Process Engine", "Camunda Zeebe", "Executes BPMN workflows")
    Component(decision_engine, "Decision Engine", "Camunda DMN", "Business rules for case classification")
    Component(task_service, "Task Service", "Zeebe Client", "Manages user tasks and assignments")
    Component(workflow_api, "Workflow API", "Spring Boot", "REST endpoints for workflow operations")
}

Container_Boundary(case_service_container, "Case Management Service") {
    Component(case_controller, "Case Controller", "Spring MVC", "REST endpoints for case operations")
    Component(case_service_comp, "Case Service", "Spring Service", "Business logic for case management")
    Component(classification_service, "Classification Service", "Spring Service", "Integrates with DMN for case routing")
    Component(notification_service, "Notification Service", "Spring Service", "Sends notifications and alerts")
    Component(audit_logger, "Audit Logger", "Spring Component", "Logs workflow transitions")
}

Container_Boundary(data_layer, "Data Layer") {
    ComponentDb(case_repo, "Case Repository", "Spring Data JPA", "Case data access")
    ComponentDb(workflow_repo, "Workflow Repository", "Spring Data JPA", "Workflow state persistence")
    ComponentDb(audit_repo, "Audit Repository", "Spring Data JPA", "Audit trail storage")
}

Container_Ext(forms, "Camunda Forms", "Form definitions for user tasks")
Container_Ext(external_users, "System Users", "Intake analysts, investigators, etc.")

Rel(external_users, case_controller, "Submits cases via", "REST API")
Rel(case_controller, case_service_comp, "Delegates to")
Rel(case_service_comp, classification_service, "Classifies allegations via")
Rel(classification_service, decision_engine, "Evaluates rules in")
Rel(case_service_comp, workflow_api, "Starts process via")
Rel(workflow_api, process_engine, "Creates instance in")
Rel(process_engine, task_service, "Creates user tasks via")
Rel(task_service, forms, "Renders forms from")
Rel_Back(external_users, task_service, "Completes tasks in")
Rel(process_engine, notification_service, "Triggers notifications via")
Rel(process_engine, audit_logger, "Logs transitions to")
Rel(case_service_comp, case_repo, "Persists data via")
Rel(workflow_api, workflow_repo, "Stores state in")
Rel(audit_logger, audit_repo, "Writes audit trail to")

note right of decision_engine
  **DMN Classification Rules:**
  
  **Input:** Allegation Type + Severity
  **Output:** Department + Priority + Assignment
  
  Examples:
  • Harassment + HIGH → HR + CRITICAL
  • Fraud + CRITICAL → Legal + CRITICAL  
  • Data Breach + HIGH → Security + CRITICAL
  • Multi-type → Parallel processing
end note

note left of process_engine
  **BPMN Workflow Steps:**
  
  1. **EO Intake** - Initial case review
  2. **DMN Classification** - Auto-route to department
  3. **Department Assignment** - Specialist review
  4. **Investigation** - Detailed investigation
  5. **Case Closure** - Final review and closure
  
  **Parallel Processing** for multi-department cases
end note

@enduml

@startuml C4_Deployment_CMS
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml

title CMS Deployment Architecture

Deployment_Node(user_device, "User Device", "Windows/Mac/Linux") {
    Container(browser, "Web Browser", "Chrome, Firefox, Edge", "User interface")
}

Deployment_Node(load_balancer, "Load Balancer", "AWS ALB/NGINX") {
    Container(lb_service, "Load Balancer", "NGINX", "Distributes traffic")
}

Deployment_Node(app_server_cluster, "Application Server Cluster", "AWS ECS/Kubernetes") {
    Deployment_Node(app_server_1, "App Server 1", "Docker Container") {
        Container(cms_app_1, "CMS Application", "Spring Boot JAR", "Main application instance")
    }
    Deployment_Node(app_server_2, "App Server 2", "Docker Container") {
        Container(cms_app_2, "CMS Application", "Spring Boot JAR", "Main application instance")
    }
}

Deployment_Node(workflow_cluster, "Workflow Cluster", "Camunda Cloud/Self-Hosted") {
    Container(zeebe_broker, "Zeebe Broker", "Camunda Zeebe", "Workflow engine")
    Container(operate, "Camunda Operate", "Camunda Web App", "Workflow monitoring")
    Container(tasklist, "Camunda Tasklist", "Camunda Web App", "Task management")
}

Deployment_Node(database_server, "Database Server", "AWS RDS PostgreSQL") {
    ContainerDb(postgres_primary, "PostgreSQL Primary", "PostgreSQL 15", "Main database")
    ContainerDb(postgres_replica, "PostgreSQL Replica", "PostgreSQL 15", "Read replica")
}

Deployment_Node(monitoring, "Monitoring & Logging", "AWS CloudWatch/ELK Stack") {
    Container(metrics, "Metrics Collector", "Prometheus/CloudWatch", "Application metrics")
    Container(logs, "Log Aggregator", "ELK Stack/CloudWatch", "Centralized logging")
}

Rel(browser, lb_service, "HTTPS requests")
Rel(lb_service, cms_app_1, "Routes to")
Rel(lb_service, cms_app_2, "Routes to")
Rel(cms_app_1, zeebe_broker, "Workflow commands")
Rel(cms_app_2, zeebe_broker, "Workflow commands")
Rel(cms_app_1, postgres_primary, "Database operations")
Rel(cms_app_2, postgres_primary, "Database operations")
Rel(postgres_primary, postgres_replica, "Replication")
Rel(cms_app_1, metrics, "Sends metrics")
Rel(cms_app_2, logs, "Sends logs")
Rel(zeebe_broker, operate, "Workflow data")
Rel(zeebe_broker, tasklist, "Task data")

AddProperty("Environment", "Production")
AddProperty("Availability", "99.9% SLA")
AddProperty("Scaling", "Auto-scaling enabled")
AddProperty("Backup", "Daily automated backups")

@enduml